plugins {
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '5.0.0'

    id 'maven-publish'
}

group 'YAPION'
version 'SNAPSHOT'

ext {
    uberJarName = "${group}-${version}-all.jar"
    jarName = "${group}-${version}.jar"
    libs = "${buildDir}/libs"

    groupName = "${group}"

    publication = mayor + "." + minor + "." + patch
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

mainClassName = 'system.YAPIONMain'

repositories {
    jcenter()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testImplementation 'org.hamcrest:hamcrest:2.2'

    implementation 'org.objenesis:objenesis:3.1'
    implementation 'cglib:cglib:3.3.0'
    implementation 'de.scrum-master.org.javassist:javassist:3.27.0-GA-bugfix-328'
}

shadowJar {
    manifest {
        attributes(
                'Main-Class': mainClassName
        )
    }

    from(rootDir) {
        include 'LICENSE'
    }
    from(rootDir) {
        include '**/README.md'
    }
}

publishing {
    repositories {
        maven {
            url = "${rootDir}/releases"
        }
    }
    publications {
        maven(MavenPublication) {
            groupId = 'yoyosource'
            artifactId = group
            version = publication

            from components.java
        }
    }
}

task incrementMayor {
    description 'Increment Mayor'
    group "Release"

    doLast {
        mayor = Integer.parseInt(mayor) + 1
        minor = 0
        patch = 0
        save()
    }
}

task incrementMinor {
    description 'Increment Minor'
    group "Release"

    doLast {
        minor = Integer.parseInt(minor) + 1
        patch = 0
        save()
    }
}

task incrementPatch {
    description 'Increment Patch'
    group "Release"

    doLast {
        patch = Integer.parseInt(patch) + 1
        save()
    }
}

private void save() {
    File f = new File("${new File("${buildDir}").parentFile.toString()}/gradle.properties")
    String[] strings = f.getText().split("\n")
    for (int i = 0; i < strings.length; i++) {
        if (strings[i].startsWith("mayor = ")) {
            strings[i] = "mayor = " + mayor
        } else if (strings[i].startsWith("minor = ")) {
            strings[i] = "minor = " + minor
        } else if (strings[i].startsWith("patch = ")) {
            strings[i] = "patch = " + patch
        }
    }
    f.text = String.join("\n", strings)
}

task publishProject {
    description 'Publish this repo to GitHub Maven'
    group "Release"

    dependsOn publishMavenPublicationToMavenRepository
}

task buildProject {
    description 'Build this repo'
    group "Build"

    dependsOn 'build'

    doLast {
        if ("${buildDir}" == null) {
            return
        }
        delete fileTree("${libs}").matching {
            exclude("${uberJarName}")
        }
        file(libs + "/" + uberJarName).renameTo(file(libs + "/" + jarName))
    }
}

task licenseProject {
    description 'Add the License to every file'
    group "Build"

    mustRunAfter classes

    doLast {
        def command = "java -classpath ${buildDir}/classes/java/main system.LicenseSystem${groupName} ${buildDir}"
        def retval = command.execute().text
        print(retval)
    }
}
shadowJar.dependsOn licenseProject