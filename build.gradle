plugins {
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '5.0.0'

    id 'maven-publish'
}

group 'YAPION'
def groupID = 'yoyosource'
version 'SNAPSHOT'

ext {
    uberJarName = "${group}-${version}-all.jar"
    jarName = "${group}-${version}.jar"
    libs = "${buildDir}/libs"

    groupName = "${group}"

    publication = major + "." + minor + "." + patch

    releasePath = "releases/${groupID}/${group}"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

mainClassName = 'system.YAPIONMain'

repositories {
    jcenter()
}

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.6'
    testCompileOnly 'org.projectlombok:lombok:1.18.6'
    annotationProcessor 'org.projectlombok:lombok:1.18.6'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.6'

    implementation 'org.atteo.classindex:classindex:3.4'
    testImplementation 'org.atteo.classindex:classindex:3.4'
    annotationProcessor 'org.atteo.classindex:classindex:3.4'
    testAnnotationProcessor 'org.atteo.classindex:classindex:3.4'

    implementation 'org.objenesis:objenesis:3.1'
    implementation 'org.slf4j:slf4j-api:2.0.0-alpha1'
    // implementation 'io.github.classgraph:classgraph:4.8.46'
    implementation 'eu.infomas:annotation-detector:3.0.5'

    testCompile 'junit:junit:4.12'
    testImplementation 'org.hamcrest:hamcrest:2.2'

    testImplementation 'ch.qos.logback:logback-classic:1.3.0-alpha5'
}

processResources {
    from("build/classes/java/main/META-INF/annotations/") {
        include 'yapion.serializing.serializer.SerializerImplementation'
        into("yapion")
    }

    from(rootDir) {
        include(['LICENSE'])
        into("")

        includeEmptyDirs = false
    }
}

shadowJar {
    manifest {
        attributes(
                'Main-Class': mainClassName
        )
    }
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
            exclude 'system/**', 'test/**'
        }
        resources {
            exclude '**/*.ebnf', '**/*.xhtml', "**/*.gitkeep"
        }
    }
    test {
        java {
            srcDirs = ['src/test/java/']
        }
        resources {
            exclude '**/*.ebnf', '**/*.xhtml', "**/*.gitkeep"
        }
    }
}

javadoc {
    source = 'src/main/java/yapion'
    // destinationDir = ''
    include("**/*.java")
    exclude("**/PublicKeySerializer.java")
    exclude("src/main/java/system",
            "src/main/java/test")
}

publishing {
    repositories {
        maven {
            url = "${rootDir}/releases"
        }
    }
    publications {
        maven(MavenPublication) {
            groupId = groupID
            artifactId = group
            version = publication

            from components.java
        }
    }
}

// + "-SNAPSHOT"

task incrementMajor {
    description 'Increment Major'
    group "Release"

    doLast {
        major = Integer.parseInt(major) + 1
        minor = 0
        patch = 0
        println("Version: " + major + "." + minor + "." + patch)
        save()
        println("NEXT STEP: projectPublish")
    }
}

task incrementMinor {
    description 'Increment Minor'
    group "Release"

    doLast {
        minor = Integer.parseInt(minor) + 1
        patch = 0
        println("Version: " + major + "." + minor + "." + patch)
        save()
        println("NEXT STEP: projectPublish")
    }
}

task incrementPatch {
    description 'Increment Patch'
    group "Release"

    doLast {
        patch = Integer.parseInt(patch) + 1
        println("Version: " + major + "." + minor + "." + patch)
        save()
        println("NEXT STEP: projectPublish")
    }
}

private void save() {
    File f = new File("${new File("${buildDir}").parentFile.toString()}/gradle.properties")
    String[] strings = f.getText().split("\n")
    for (int i = 0; i < strings.length; i++) {
        if (strings[i].startsWith("major = ")) {
            strings[i] = "major = " + major
        } else if (strings[i].startsWith("minor = ")) {
            strings[i] = "minor = " + minor
        } else if (strings[i].startsWith("patch = ")) {
            strings[i] = "patch = " + patch
        }
    }
    f.text = String.join("\n", strings)
}

task projectPublish {
    description 'Publish this repo to GitHub Maven'
    group "Release"

    dependsOn publishMavenPublicationToMavenRepository

    doLast {
        println("NEXT STEP: projectCommit")
    }
}

task projectCommit {
    description 'Commit this repo to GitHub/origin'
    group "Release"

    doLast {
        def status = shell("git status")
        if (!status.toString().contains("${releasePath}/${major}.${minor}.${patch}/")) {
            println("No new Version detected")
            return
        }

        println("Adding new files to git")
        shell("git add ${releasePath}/${major}.${minor}.${patch}/")
        shell("git add gradle.properties")
        shell("git add ${releasePath}/maven-metadata.xml")
        shell("git add ${releasePath}/maven-metadata.xml.md5")
        shell("git add ${releasePath}/maven-metadata.xml.sha1")
        shell("git add ${releasePath}/maven-metadata.xml.sha256")
        shell("git add ${releasePath}/maven-metadata.xml.sha512")

        println("Creating new commit with name 'Maven Release ${major}.${minor}.${patch}'")
        shell("git commit -m \"Maven Release ${major}.${minor}.${patch}\"")
        println("Creating new tag with name 'V${major}.${minor}.${patch}'")
        shell("git tag \"V${major}.${minor}.${patch}\"")

        if (!answer("Should this commit be pushed? [Y/n]")) {
            println("Use 'git push' and 'git push --tags' to manually push this to origin.")
        } else {
            shell("git push")
            shell("git push --tags")
        }

        println("NEXT STEP: projectJavaDoc")
    }
}

task projectJavaDoc {
    description 'Create new JavaDoc for the existing sources'
    group "Release"

    dependsOn javadoc

    doLast {
        shell("mkdir docs/javadoc/v${major}.${minor}.${patch}")
        shell("cp -R build/docs/javadoc/* docs/javadoc/v${major}.${minor}.${patch}")

        if (!answer("Should this change be comitted? [Y/n]")) {
            println("Use 'git commit -m \"Documentation update\"' to manually commit this change.'")
            return
        }
        println("Creating new commit with name 'Documentation update'")
        shell("git add docs/javadoc/v${major}.${minor}.${patch}")
        shell("git commit -m \"Documentation update\"")

        if (answer("Should this commit be pushed? [Y/n]")) {
            shell("git push")
        } else {
            println("Use 'git push' to manually push this to origin.")
        }

        println("NEXT STEP: ----")
    }
}

/**
 * Executes a shell command and returns the stdout result.
 *
 * @param command the command to execute (cannot contain pipes)
 * @return the trimmed result from stdout, stderr and the exit value
 */
def shell(String command) {
    def proc = ['bash', '-c', command].execute()
    def out = new StringBuilder()
    def err = new StringBuilder()
    proc.waitForProcessOutput(out, err)

    return [out.toString().trim(), err.toString().trim(), proc.exitValue()]
}

def answer(String question) {
    while (System.in.available() > 0) System.in.read()
    println(question)
    return "Yy".contains(((char)System.in.read()).toString())
}

task buildProject {
    description 'Build this repo'
    group "Build"

    dependsOn 'build'

    doLast {
        if ("${buildDir}" == null) {
            return
        }
        delete fileTree("${libs}").matching {
            exclude("${uberJarName}")
        }
        file(libs + "/" + uberJarName).renameTo(file(libs + "/" + jarName))
    }
}

task licenseProject {
    description 'Add the License to every file'
    group "Build"

    mustRunAfter classes

    doLast {
        def command = "java -classpath ${buildDir}/classes/java/main system.LicenseSystem${groupName} ${buildDir}"
        def retval = command.execute().text
        print(retval)
    }
}
shadowJar.dependsOn licenseProject