
package %PACKAGE%;

import yapion.annotations.deserialize.YAPIONLoadExclude;
import yapion.annotations.serialize.YAPIONOptimize;
import yapion.annotations.serialize.YAPIONSaveExclude;
import yapion.exceptions.utils.YAPIONReflectionException;
import yapion.hierarchy.api.groups.YAPIONAnyType;
import yapion.hierarchy.types.YAPIONObject;
import yapion.serializing.ContextManager;
import yapion.serializing.MethodManager;
import yapion.serializing.InternalSerializer;
import yapion.serializing.data.DeserializeData;
import yapion.serializing.data.SerializeData;

import java.lang.reflect.Field;
import java.lang.reflect.Modifier;
import java.util.Set;
import java.util.HashSet;

import static yapion.utils.ReflectionsUtils.getField;
import static yapion.utils.ReflectionsUtils.getFields;
import static yapion.utils.ReflectionsUtils.accessField;

public class %NAME%Serializer implements InternalSerializer<%NAME%> {
    private %NAME%Serializer() {}

%REFLECTION_FIELDS%
%FIELDS%
    @Override
    public void init() {
%FIELDS_INIT_CALL%
%REFLECTION%
    }

%FIELDS_INIT%
%FIELDS_LOAD%
    @Override
    public Class<%NAME%> type() {
        return %NAME%.class;
    }

    @Override
    public YAPIONAnyType serialize(SerializeData<%NAME%> serializeData) {
%PRE_SERIALIZATION%
        YAPIONObject yapionObject = new YAPIONObject(type());
%SERIALIZATION%
%SERIALIZATION_FIELDS%
%POST_SERIALIZATION%
        return yapionObject;
    }

    @Override
    public %NAME% deserialize(DeserializeData<? extends YAPIONAnyType> deserializeData) {
        %NAME% object = deserializeData.getInstanceByFactoryOrObjenesis(type());
%PRE_DESERIALIZATION%
%DESERIALIZATION%
%DESERIALIZATION_FIELDS%
%POST_DESERIALIZATION%
        return object;
    }
}